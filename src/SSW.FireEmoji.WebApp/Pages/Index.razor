@page "/"
@using SSW.FireEmoji.WebApp.Classes
@using SSW.FireEmoji.Core.MachineLearning
@using SSW.FireEmoji.Core.Models

@inject HttpClient _httpClient

<PageTitle>FireEmoji</PageTitle>

<div class="row justify-content-md-center">
    <h1 class="col-sm-10 m-2">FireEmoji</h1>

    @if (!string.IsNullOrEmpty(_emojiPrediction?.Character))
    {
        <div class="w-100"></div>
        <div class="d-flex justify-content-center">
            <p Style="font-size: 69px;">@_emojiPrediction.Character</p>
        </div>
    }
    <div class="w-100"></div>
    <MessageInput CommitMessage="@_commitMessage"
                  CommitMessageChanged="FetchGitmoji"
                  EmojiPrediction="_emojiPrediction"/>
</div>

<div class="row justify-content-md-center">
    @foreach (var emoji in emojiList)
    {
        <EmojiCard Emoji="@emoji"/>
    }
</div>

@code {
    private readonly GitmoPredictor _predictor = new();
    private string _commitMessage = string.Empty;
    private Emoji? _emojiPrediction;
    private static string ModelStreamUri => "gitmo.mlnet";

    protected override async Task OnInitializedAsync()
    {
        await LoadModel();
        await base.OnInitializedAsync();
    }

    private async Task LoadModel()
    {
        var modelStream = await _httpClient.GetStreamAsync(ModelStreamUri);
        _predictor.LoadFromStream(modelStream);
    }

    private IList<Emoji> emojiList = new List<Emoji>
    {
        new()
        {
            Character = "✨",
            Name = "sparkles"
        },
        new()
        {
            Character = "🐛",
            Name = "bug"
        },
        new()
        {
            Character = "🔥",
            Name = "fire"
        }
    };


    private void FetchGitmoji(string userInput)
    {
        _commitMessage = userInput;
        if (string.IsNullOrEmpty(_commitMessage))
        {
            _emojiPrediction = null;
            return;
        }

        var prediction = _predictor.Predict(new GitComment {Comment = userInput});

        _emojiPrediction = new Emoji
        {
            Character = prediction.Emoji
        };
    }

}
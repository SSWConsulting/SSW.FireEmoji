@page "/"
@using SSW.FireEmoji.WebApp.Classes
@using SSW.FireEmoji.Core.MachineLearning
@using SSW.FireEmoji.Core.Models

@inject HttpClient _httpClient

<PageTitle>FireEmoji</PageTitle>
    <MessageInput CommitMessage="@_commitMessage"
                  CommitMessageChanged="FetchGitmoji"
                  EmojiPrediction="_emojiPrediction"/>

<div style="display: flex; justify-content: space-between; flex-direction: column; flex-grow: 1; flex-shrink: 0; flex-basis: auto;">
    <div style="display: flex; justify-content: center; align-items: center; flex-wrap: wrap; padding: 1rem; width: 100%">
        @foreach (var emoji in _emojiList)
        {
            <div style="padding: 1rem">
                <EmojiCard Emoji="@emoji"/>
            </div>
        }
    </div>

    <div style="display: flex; justify-content: center; align-items: center; background: #dddddd">
        <Text>We 💖 Open Source. Powered by GitHub and gitmoji</Text>
    </div>
</div>

@code {
    private string _commitMessage = string.Empty;
    private Emoji? _emojiPrediction;
    private List<Emoji> _emojiList = new List<Emoji>();

    private readonly GitmoPredictor _predictor = new();
    private static string ModelStreamUri => "gitmo.mlnet";

    protected override async Task OnInitializedAsync()
    {
        await LoadModel();
        await base.OnInitializedAsync();
    }

    private async Task LoadModel()
    {
        var modelStream = await _httpClient.GetStreamAsync(ModelStreamUri);
        _predictor.LoadFromStream(modelStream);
    }

    private void FetchGitmoji(string userInput)
    {
        _commitMessage = userInput;
        if (string.IsNullOrEmpty(_commitMessage))
        {
            _emojiList.Clear();
            _emojiPrediction = null;
            return;
        }

        var prediction = _predictor.PredictionList(new GitComment {Comment = userInput});

        UpdatePredictionList(prediction);

        _emojiPrediction = _emojiList.FirstOrDefault();
        _emojiList.RemoveAt(0);
        
        StateHasChanged();
    }

    private void UpdatePredictionList(Dictionary<string, float> predictionList)
    {
        Console.WriteLine("New Predictions");

        _emojiList.Clear();

        if (predictionList.Count == 0)
            return;

        var emojiPredictions = predictionList.OrderByDescending(x => x.Value);

        int index = 0;

        foreach(var emoji in emojiPredictions)
        {
            if (index > 6)
                break;

            Console.WriteLine($"{emoji.Key}, {emoji.Value}");

            index++;

            _emojiList.Add(new Emoji
                {
                    Character = emoji.Key,
                    Name = "WIP"
                });
        }
    }
}